openapi: 3.0.1

info:
  description: "prtfolioについてのAPI"
  version: v1
  title: "portfolio API"
  termsOfService: "http://swagger.io/terms/"

servers:
  - url: /api

paths:
  /category:
    get:
      tags:
        - for_show
      description: クライアント用のメインカテゴリー一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/MainCategory"
  /category/sub:
    get:
      tags:
        - for_show
      description: クライアント用のサブカテゴリー一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubCategory"
  
  /category/content/{mainID}:
    parameters:
      - $ref: "#/components/parameters/mainID"
    get:
      tags:
        - for_show
      description: 該当するmainIDのメインカテゴリー下のコンテンツ一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
  
  /category/content/sub/{subID}:
    parameters:
      - $ref: "#/components/parameters/subID"
    get:
      tags:
        - for_show
      description: 該当するsubIDのサブカテゴリー下のコンテンツ一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
  
  /content:
    get:
      tags:
        - for_show
      description: コンテンツ一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"

  /content/{contentID}:
    parameters:
      - $ref: "#/components/parameters/contentID"
    get:
      tags:
        - for_show
      description: 正常に取得できました
      responses:
        200:
          description: コンテンツ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"

  /tag:
    get:
      tags:
        - for_show
      description: タグ一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
  
  /tag/content/{tagID}:
    parameters:
      - $ref: "#/components/parameters/tagID"
    get:
      tags:
        - for_show
      description: 該当するtagIDのタグがついたコンテンツ一覧を取得
      responses:
        200:
          description: 正常に取得できました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
  
  /edit/signup:
    post:
      tags:
        - edit
      description: サインアップ
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNameAndPassword"
      responses:
        201:
          description: 正しくアカウントが作成されました
        400:
          description: リクエストが不適切、またはすでにオーナーのアカウントが存在しています
  
  /edit/login:
    post:
      tags:
        - edit
      description: ログイン
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNameAndPassword"
      responses:
        200:
          description: 正しくログインされました
  
  /edit/logout:
    get:
      tags:
        - edit
      description: ログアウト
      responses:
        200:
          description: 正しくログアウトされました

components:
  parameters:
    mainID:
      name: mainID
      in: path
      required: true
      description: メインカテゴリーのID
      schema:
        type: string
    
    subID:
      name: subID
      in: path
      required: true
      description: サブカテゴリーのID
      schema:
        type: string
    
    contentID:
      name: contentID
      in: path
      required: true
      description: コンテンツのID
      schema:
        type: string
    
    tagID:
      name: tagID
      in: path
      required: true
      description: タグのID
      schema:
        type: string
    
    taggedContentID:
      name: taggedContentID
      in: path
      required: true
      description: TaggedContentのID
      schema:
        type: string
    
    subImageID:
      name: subImageID
      in: path
      required: true
      description: サブイメージのID
      schema:
        type: string

  schemas:
    MainCategory:
      description: メインカテゴリー
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        sub_categories:
          type: array
          items:
            $ref: "#/components/schemas/SubCategory"
    
    SubCategory:
      description: メインカテゴリー
      type: object
      properties:
        id:
          type: string
        main_category_id:
          type: string
          description: 親のメインカテゴリーのID
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
    
    Content:
      description: コンテンツ
      type: object
      properties:
        id:
          type: string
        category_id:
          type: string
          description: 所属するカテゴリーのID
        title:
          type: string
        image:
          type: string
          description: メイン画像のURL
        description:
          type: string
        date:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
          description: 設定したコンテンツの作成日
        sub_images_count:
          type: integer
        sub_images:
          type: array
          items:
            $ref: "#/components/schemas/SubImage"
        tagged_contents:
          type: array
          items:
            $ref: "#/components/schemas/TaggedContent"
        created_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        sub_category:
          $ref: "#/components/schemas/SubCategory"
        main_category:
          $ref: "#/components/schemas/MainCategory"
    
    SubImage:
      description: サブイメージ
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        content_id:
          type: string
        url:
          type: string
        created_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
    
    Tag:
      description: タグ
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          example: "2019-04-01T12:00:00+09:00"
    
    TaggedContent:
      description: タグとコンテンツの情報
      type: object
      properties:
        id:
          type: string
        tag_id:
          type: string
        content_id:
          type: string
        tag:
          $ref: "#/components/schemas/Tag"

    UserNameAndPassword:
      type: object
      properties:
        user_name:
          type: string
        password:
          type: string